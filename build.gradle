plugins {
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.9.20'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = mod_version
group = mod_group_id
base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true
    // Add your AccessTransformer
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            // If you can't run the project, comment this line out and rerun genIntellijRuns
            property '-XX:+AllowEnhancedClassRedefinition', ''
            //arg '-mixin.config=hardcoredungeons.mixins.json'

            // these are required for Curios API
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            workingDirectory project.file('run')

            arg '--username=TheDarkColour'
        }

        server {
            workingDirectory project.file('run/server')
        }

        gameTestServer {
        }

        data {
            workingDirectory project.file('run')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')
        }
    }
}

// Include assets and data from data generators
sourceSets.main.resources { srcDirs 'src/generated/resources/' }
sourceSets.main.java { srcDirs 'src/util/java' }

repositories {
    mavenCentral()
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
	maven {
        name = 'curios'
        url = 'https://maven.theillusivec4.top/'
        content { includeGroup "top.theillusivec4.curios" }
    }
    maven {
        name = 'ctm'
        url = 'https://maven.tterrag.com/'
        content { includeGroup "team.chisel.ctm" }
    }
    maven {
        name = 'jei'
        url = 'https://maven.blamejared.com/'
        content { includeGroup "mezz.jei" }
    }
    maven {
        name = 'McJty maven'
        url = 'https://maven.k-4u.nl'
        content { includeGroup 'mcjty.theoneprobe' }
    }
    maven {
        name = 'ModKit'
        url 'https://jitpack.io'
        content { includeGroup 'com.github.thedarkcolour' }
    }
}

dependencies {
    // Use the latest version of Minecraft Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // curios
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${minecraft_version}")

    // jei
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    // the one probe
    implementation(fg.deobf("mcjty.theoneprobe:theoneprobe:${minecraft_version}-${top_version}") {
        transitive = false
    })

    implementation ('thedarkcolour:kotlinforforge:4.7.0')

    implementation fg.deobf('com.github.thedarkcolour:ModKit:e2ad4272c2')
}

processResources {
    // Check duplicate files
    setDuplicatesStrategy(DuplicatesStrategy.WARN)

    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
            pack_format_number: pack_format_number
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }

    // minify json resources https://stackoverflow.com/a/41029113/10860617
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            File file -> file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
        }
    }
}

jar {
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
